//
//  MapViewController.swift
//  CleanFoodLogger
//
//  Created by Takahiro Kato on 2017/10/07.
//  Copyright © 2017年 Takahiro Kato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps

protocol MapViewDisplayLogic: class {
    func displayInitMap(viewModel: MapView.Init.ViewModel)
    func displaySearchedSuccess(viewModel: MapView.Search.ViewModel)
    func displaySearchedFailure(viewModel: MapView.Search.ViewModel)
}

class MapViewController: UIViewController, MapViewDisplayLogic {
    var interactor: MapViewBusinessLogic?
    var router: (NSObjectProtocol & MapViewRoutingLogic & MapViewDataPassing)?
    
    @IBOutlet weak var mapView: GMSMapView!
    var locationManager: CLLocationManager?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MapViewInteractor()
        let presenter = MapViewPresenter()
        let router = MapViewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureMapView()
        configureLocationManager()
    }
    
    // MARK: Configuration
    func configureMapView() {
        // GoogleMapの初期化
        mapView.isMyLocationEnabled = true
        mapView.mapType = GMSMapViewType.normal
        mapView.settings.compassButton = true
        mapView.settings.myLocationButton = true
        mapView.settings.compassButton = true
        mapView.delegate = self
    }
    
    func configureLocationManager() {
        // 位置情報関連の初期化
        self.locationManager = CLLocationManager()
        self.locationManager?.desiredAccuracy = kCLLocationAccuracyBest
        self.locationManager?.requestWhenInUseAuthorization()
        self.locationManager?.startUpdatingLocation()
        self.locationManager?.delegate = self
    }
    
    // MARK: Init mapView
    
    func displayInitMap(viewModel: MapView.Init.ViewModel) {
        // 初期描画時のマップ中心位置の移動
        let coordinate = CLLocationCoordinate2D(latitude: viewModel.latitude, longitude: viewModel.longitude)
        let camera = GMSCameraPosition.camera(withTarget: coordinate, zoom: viewModel.zoomLevel)
        mapView.camera = camera
    }
    
    // MARK: Search restaurants
    
    func searchRestaurants() {
        guard let latitude = mapView.myLocation?.coordinate.latitude, let longitude = mapView.myLocation?.coordinate.longitude else {
            return
        }
        let request = MapView.Search.Request(latitude: latitude, longitude: longitude)
        interactor?.searchRestaurants(request: request)
    }
    
    func displaySearchedSuccess(viewModel: MapView.Search.ViewModel) {
        let restaurants = viewModel.restaurants
        for restaurant in restaurants {
            putMarker(restaurant: restaurant)
        }
    }
    
    func displaySearchedFailure(viewModel: MapView.Search.ViewModel) {
        showAlert(title: "確認", message: "周辺にレストランは見つかりませんでした。") {
        }
    }
    
    @IBAction func tappedSearchButton(_ sender: Any) {
        searchRestaurants()
    }
    
    // MARK: Other
    /**
     マップにマーカをプロットする処理
     
     - Parameter shop: ショップデータ
     */
    private func putMarker(restaurant: Restaurant) {
        let marker = CustomGMSMarker()
        marker.id = restaurant.id
        marker.name = restaurant.name
        marker.category = restaurant.category
        marker.imageURL = restaurant.imageURL
        marker.position = CLLocationCoordinate2D(latitude: restaurant.latitude, longitude: restaurant.longitude)
        marker.icon = UIImage(named: "RestaurantIcon")
        marker.appearAnimation = GMSMarkerAnimation.pop
        marker.map = mapView
    }
}

extension MapViewController: CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        switch status {
        case .notDetermined:
            break
        case .restricted, .denied:
            break
        case .authorizedWhenInUse:
            break
        default:
            break
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        // マップの初期描画
        if let coordinate = locations.last?.coordinate {
            let request = MapView.Init.Request(latitude: coordinate.latitude, longitude: coordinate.longitude)
            interactor?.initMapView(request: request)
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        if !CLLocationManager.locationServicesEnabled() {
            // 端末の位置情報がOFFになっている場合
            // アラートはデフォルトで表示されるので内部で用意はしない
            return
        }
        if CLLocationManager.authorizationStatus() != CLAuthorizationStatus.authorizedWhenInUse {
            // アプリの位置情報許可をOFFにしている場合
            self.showAlert(title: "確認", message: "FoodLoggerで位置情報を取得することができません。設定から位置情報を許可してください。", completion: {
            })
            return
        }
    }
}

extension MapViewController: GMSMapViewDelegate {
    
    func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -> Bool {
        return false
    }
    
    func mapView(_ mapView: GMSMapView, markerInfoWindow marker: GMSMarker) -> UIView? {
        guard let cMarker = marker as? CustomGMSMarker else {
            return nil
        }
        
        cMarker.tracksInfoWindowChanges = true
        let view = CustomInfoWindow(frame: CGRect(x: 0, y: 0, width: 250, height: 265))
        view.setup(name: cMarker.name, category: cMarker.category, imageURL: cMarker.imageURL)
        
        return view
    }
    
    func mapView(_ mapView: GMSMapView, didTapInfoWindowOf marker: GMSMarker) {
    }
}
